Abstract: 
  - what shortcomings?/which issues? 
    => elaborated on the issues in existing data replication solutions proposed in the literature.

Introduction: 
  - Please define optimistic replica control. 
    => elaborated on this in the sentence itself.
  - "the proposed algorithms" usually refers to your own algorithms 
    => changed text.
  - These two conflict resolving algorithms are essentially the core of your work, but neither here nor in the abstract does it become clear to the reader which algorithm is to be preferred and what the main difference is between the two algorithms./I think you should more clearly indicate which parts of your proposed approach are algorithms that existed already, and which parts are the novel additions. Also, clearly indicate the extent of the difference between your two proposed algorithms. 
    => elaborated on the difference of the two algoritms with existing work, their mutual differences and the outcome of their benchmarks.
  - Here I would introduce the other chapters as well.
    => introduced all sections

Related Work:
  - This makes more sense if you introduce both approaches at the start. "There are two approaches for â€¦"
    => rewrote first part of paragraph
  - What does serializable mean in this context? 
    => elaborated on this in the text.
  - knows = has?
    => fixed
  - made/have made
    => fixed
  - A lot
    => fixed
  - Are you introducing two approaches in this thesis, or is one of the approaches an implementation of an existing approach from the literature?
    => rewrote paragraph - made difference with existing approaches more explicit
  - sometimes
    => fixed
    
Concept:
  - built
    => fixed
  - Add reference?
    => reference added for vector clocks
  - conflict
    => fixed
  - whether
    => fixed
  - At this point, I'm not sure which algorithms are part of your proposed approach and which are part of existing approaches.
    => both are new, this should now be clear in the introduction and related work section
    
Realization
  - Sentence lacks a verb.
    => fixed sentence
  - Why are some URLs included as references and others as footnotes?
    => moved to references section
  - Is @ like 'this' in JavaScript?
    => yes, added footnote
  - its
    => fixed twice
  - Doesn't this defeat the purpose of using vector clocks?
    => implemented lamport timestamps for this as previously described in the future work section
  - Did you mean to highlight this line?
    => highlight added
  - It may be important to note here that if there is an update of a client A that was multicasted and caused some conflicts of a client B, whether those conflicts are resolved immediately, or whether the resolving is done lazily. In the former case, one update could lead to a landslide of updates from other clients. This poses the greater question: when does a client initiate the synchronisation process? Is it only initiated manually?
    => the conflicts are reconciled immediately - changed text to make this clear
  - finishedSyncing cleans up remaining patches?
    => the line just above it does - highlight added
  - Does a diff make sense for anything other than Strings? E.g., if you have a number 404, and you changed it locally to 401 while the server changed it to 500, would a diff on numbers consider the difference and change it to 497? And what do you mean by a diff for booleans?
    => moved this to the future work section as it required more elaboration
  - What can cause the application of a patch to fail?
    => elaborated on this in the text
  
Results
  - The
    => fixed
  - to
    => fixed
  - Assuming that they both fall under preventive reconciliation, do structured content diffs and merged diff objects incur the same network latency?
    => the conflict resolution algorithms have the same network latency. they work the same for traditional and preventive reconciliation
  - Over how many runs did you average? What is the variance of these results?
    => added footnotes specifying these things
  - Am I correct in assuming that the structured content diffs use incremental logging and the merged diff object does merged logging?
    => clarified this in the text
  - Is this comparison fair? When two things differ too much, a diff/patch approach will fail because it doesn't know what to patch. In your approach for rebasing merged diff objects, you simply overwrite the outdated attributes. In general, you can resolve 100% of the conflicts between two versions by always picking one of them, but this is not always the best result. I think this issue needs to be addressed in the Discussion section.
    => added paragraph to discussion section    
  - Does the type of data used in the comparison influence the results? In the previous chapter you mentioned that only for Strings do the merged diff objects use patching, for other values it simply overwrites the outdated data. Since your test data here consists of numbers, there is no patching going on. What if your data here would consist of Strings instead, with a few characters in each String changed randomly so as to simulate updates that could be patched. Would that put the two approaches closer together in terms of performance?
    => The data does contain strings as wel as plain text attributes of varying lengths, ranging from 15 to 100 words (not characters). The diffs for these attributes are much simpler though and therefore less failure prone than the structured content diffs => added text elaborating on this
    
Discussion
  - that
    => fixed



